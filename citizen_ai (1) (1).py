# -*- coding: utf-8 -*-
"""Citizen-AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fSgYqLdnAdMblPcomRzYwjUj59dGQLkH
"""

# ‚úÖ Step 1: Install necessary libraries
!pip install transformers torch gradio -q

# ‚úÖ Step 2: Import libraries
import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# ‚úÖ Step 3: Load IBM Granite model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"

tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Set pad_token if missing
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# ‚úÖ Step 4: Generation function
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    # Move inputs to the same device as model
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    decoded = tokenizer.decode(outputs[0], skip_special_tokens=True)

    # Only return the response (exclude the original prompt from output)
    if decoded.lower().startswith(prompt.lower()):
        response = decoded[len(prompt):].strip()
    else:
        response = decoded.strip()

    return response

# ‚úÖ Step 5: Define functions for both tabs
def city_analysis(city_name):
    prompt = (
        f"Provide a detailed analysis of {city_name} including:\n"
        f"1. Crime Index and safety statistics\n"
        f"2. Accident rates and traffic safety information\n"
        f"3. Overall safety assessment\n\n"
        f"City: {city_name}\nAnalysis:"
    )
    return generate_response(prompt, max_length=1000)

def citizen_interaction(query):
    prompt = (
        f"As a government assistant, provide accurate and helpful information about the following "
        f"citizen query related to public services, government policies, or civic issues:\n\n"
        f"Query: {query}\nResponse:"
    )
    return generate_response(prompt, max_length=1000)

# ‚úÖ Step 6: Gradio UI
with gr.Blocks() as app:
    gr.Markdown("# üèôÔ∏è City Analysis & üèõÔ∏è Citizen Services AI")

    with gr.Tabs():
        # --- City Analysis Tab ---
        with gr.TabItem("City Analysis"):
            with gr.Row():
                with gr.Column():
                    city_input = gr.Textbox(
                        label="Enter City Name",
                        placeholder="e.g., New York, London, Mumbai...",
                        lines=1
                    )
                    analyze_btn = gr.Button("Analyze City")
                with gr.Column():
                    city_output = gr.Textbox(
                        label="City Analysis (Crime Index & Accidents)",
                        lines=15,
                        interactive=False
                    )
            analyze_btn.click(fn=city_analysis, inputs=city_input, outputs=city_output)

        # --- Citizen Services Tab ---
        with gr.TabItem("Citizen Services"):
            with gr.Row():
                with gr.Column():
                    citizen_query = gr.Textbox(
                        label="Your Query",
                        placeholder="Ask about public services, government policies, civic issues...",
                        lines=4
                    )
                    query_btn = gr.Button("Get Information")
                with gr.Column():
                    citizen_output = gr.Textbox(
                        label="Government Response",
                        lines=15,
                        interactive=False
                    )
            query_btn.click(fn=citizen_interaction, inputs=citizen_query, outputs=citizen_output)

# ‚úÖ Step 7: Launch Gradio App
app.launch(share=True)